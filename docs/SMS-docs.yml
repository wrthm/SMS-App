openapi: '3.0.2'
info:
  title: Student Management System API
  version: '0.1'
# servers:
#   - url: https://api.server.test/v1
paths:
  ############ COURSES ############
  /search/course/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name used for querying courses.
        example: Science
        schema:
          type: string
    get:
      tags:
        - Course
      operationId: searchForCourse
      summary: Search for courses.
      responses:
        '200':
          description: The course entries returned that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/course"
  /courses:
    get:
      tags:
       - Course
      summary: Get list of courses. (50 entries by default)
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/course"
  /course/{courseID}:
    parameters:
      - name: id
        in: path
        required: true
        description: The entry's unique identifier
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Course
      summary: Get data of a course from its ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/course"
              example:
                id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                department_id: uuid here
                name: Bachelor of Science in Computer Science
                is_hidden: false
                created_at: "2020-02-27T10:24:24.466Z"
                updated_at: "2021-05-12T9:50:04.034Z"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Course
      summary: Delete an existing course.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /course:
    post:
      tags:
        - Course
      summary: Add a new course.
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/course"
            example:
              department_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
              name: "Bachelor of Science in Computer Engineering"
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/IncompleteInput"
    put:
      tags:
        - Course
      summary: Update an existing course.
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/course"
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '404':
          $ref: "#/components/responses/NotFound"


  ############ DEPARTMENTS ############
  /search/department/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name used for querying departments.
        example: Education
        schema:
          type: string
    get:
      tags:
        - Department
      operationId: searchForDepartment
      summary: Search for departments.
      responses:
        '200':
          description: The department entries returned that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/department"
  /departments:
    get:
      tags:
       - Department
      summary: Get list of department. (50 entries by default)
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/department"
  /department/{departmentID}:
    parameters:
      - name: id
        in: path
        required: true
        description: The entry's unique identifier
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Department
      summary: Get a department from its ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/department"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Department
      summary: Delete an existing department.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /department:
    post:
      tags:
        - Department
      summary: Adds a new department.
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/department"
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/IncompleteInput"
    put:
      tags:
        - Department
      summary: Update an existing department.
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/department"
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '404':
          $ref: "#/components/responses/NotFound"


  ############ ACADEMIC_TERMS ############
  /search/academic_terms/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name used for querying academic terms.
        example: S/Y 2018
        schema:
          type: string
    get:
      tags:
        - Academic Term
      operationId: searchForAcademicTerms
      summary: Search for academic terms.
      responses:
        '200':
          description: The academic terms entries returned that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/academic_term"
  /academic_terms:
    get:
      tags:
       - Academic Term
      summary: Get list of all academic terms. (50 entries by default)
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/academic_term"
  /academic_term/{academicTermID}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Academic Term
      summary: Get an academic term from its ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/academic_term"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Academic Term
      summary: Delete an existing academic term.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /academic_term:
    post:
      tags:
        - Academic Term
      summary: Adds a new academic term.
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/academic_term"
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/IncompleteInput"
    put:
      tags:
        - Academic Term
      summary: Update an existing department.
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/academic_term"
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '404':
          $ref: "#/components/responses/NotFound"

  ############ STUDENTS ############
  ############ SUBJECTS ############
  ############ GRADES ############
  ############ PROFESSORS ############
  ############ ENROLLMENTS ############
  ############ COURSE_SCHEDULES ############
  ############ COURSE_SCHEDULES_CONTENTS ############
  ############ SCHEDULES ############
  ############ ATTENDANCES ############
  ############ GUARDIANS ############


components:
  schemas:
  # TODO: ADD REQUIRED FIELDS
    response:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

    course:
      type: object
      required:
        - department_id
        - name
      properties:
        id:
          type: string
          format: uuid
        department_id:
          type: string
          format: uuid
        name:
          type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    department:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    academic_term:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    student:
      type: object
      properties:
        id:
          type: string
          format: uuid
        school_id:
          type: string
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        address:
          type: string
        sex:
          type: string
        birth_date:
          type: string
          format: date
        phone_number:
          type: string
        username:
          type: string
        password:
          type: string
        is_currently_enrolled:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    subject:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
        name:
          type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    grade:
      type: object
      properties:
        id:
          type: string
          format: uuid
        enrollment_id:
          type: string
          format: uuid
        subject_id:
          type: string
          format: uuid
        grade:
          type: number
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    professor:
      type: object
      properties:
        id:
          type: string
          format: uuid
        department_id:
          type: string
          format: uuid
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    enrollment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        academic_term_id:
          type: string
          format: uuid
        student_id:
          type: string
          format: uuid
        course_id:
          type: string
          format: uuid
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    course_schedule:
      type: object
      properties:
        id:
          type: string
          format: uuid
        course_id:
          type: string
          format: uuid
        academic_term_id:
          type: string
          format: uuid
        name:
          type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    course_schedule_content:
      type: object
      properties:
        id:
          type: string
          format: uuid
        course_schedule_id:
          type: string
          format: uuid
        schedule_id:
          type: string
          format: uuid
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    schedule:
      type: object
      properties:
        id:
          type: string
          format: uuid
        professor_id:
          type: string
          format: uuid
        subject_id:
          type: string
          format: uuid
        room:
          type: string
        class:
          type: string
        time_start:
          type: string
          format: time
        time_duration:
          type: string
          format: interval
        days:
          type: integer
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    attendance:
      type: object
      properties:
        id:
          type: string
          format: uuid
        device_id:
          type: string
          format: uuid
        academic_term_id:
          type: string
          format: uuid
        enrollment_id:
          type: string
          format: uuid
        check_type:
          type: integer
        created_at:
          type: string
          format: date-time

    guardian:
      type: object
      properties:
        id:
          type: string
          format: uuid
        student_id:
          type: string
          format: uuid
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time



  parameters:
    ID:
      name: id
      in: path
      required: true
      description: The entry's unique identifier
      schema:
        type: string
        format: uuid

  responses:
    Success:
      description: Operation completed successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/response"
          example:
            code: 200
            message: Operation completed successfully.

    Success201:
      description: Operation completed successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/response"
          example:
            code: 201
            message: Operation completed successfully.

    IncompleteInput:
      description: Missing required fields from input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/response"
          example:
            code: 400
            message: Missing required fields from input.

    InvalidID:
      description: Invalid ID supplied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/response"
          example:
            code: 400
            message: Invalid ID supplied.
      
    NotFound:
      description: Record not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/response"
          example:
            code: 404
            message: Record not found.

  securitySchemes:
    api_key:
      type: apiKey
      name: k
      in: header
