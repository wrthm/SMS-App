openapi: '3.0.2'
info:
  title: Student Management System API
  description: |-
    # How do I use/consume this API?
    You may [read this article.](https://www.smashingmagazine.com/2018/01/understanding-using-rest-api/)

    # Authentication
    All endpoints below will require both the API key and session token (k and t in HTTP headers, respectively) unless stated otherwise.

    ## Important note
    For now, the Application Server itself is still in the works. This means that you can't consume this API just yet.
  version: '0.1'
# servers:
#   - url: https://softeng.jbtabz.com/
paths:
  ############ LOGIN ############
  /login/s:
    post:
      tags:
        - Login
      summary: Signs in a student.
      description: Does not require the session token in the HTTP header.
      requestBody:
        description: The entered login credentials of a student
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string    
      responses:
        '200':
          description: Returns the ID of the matching student & the session token of the client
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  token:
                    type: string
                    format: uuid
        '400':
          description: Invalid username or password
  /login/fa:
    post:
      tags:
        - Login
      summary: Signs in a faculty or administrator.
      description: Does not require the session token in the HTTP header.
      requestBody:
        description: The entered login credentials of a faculty/administrator
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string    
      responses:
        '200':
          description: Returns the ID & privilege level of the matching faculty/administrator & the session token of the client
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  privilege:
                    type: integer
                  token:
                    type: string
                    format: uuid
        '400':
          description: Invalid username or password

  ############ COURSES ############
  /search/courses/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name used for querying courses.
        example: Science
        schema:
          type: string
      - $ref: "#/components/parameters/page"
      - $ref:  "#/components/parameters/limit"
    get:
      tags:
        - Search
        - Course
      operationId: searchForCourse
      summary: Search for courses.
      responses:
        '200':
          description: The course entries returned that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/course"
  /courses:
    get:
      tags:
       - Course
      summary: Get list of courses. (50 entries per page by default)
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref:  "#/components/parameters/limit"
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/course"
  /course/{courseID}:
    parameters:
      - name: id
        in: path
        required: true
        description: The entry's unique identifier
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Course
      summary: Get data of a course from its ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/course"
              example:
                id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                department_id: uuid here
                name: Bachelor of Science in Computer Science
                is_hidden: false
                created_at: "2020-02-27T10:24:24.466Z"
                updated_at: "2021-05-12T9:50:04.034Z"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Course
      summary: Delete an existing course.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /course:
    post:
      tags:
        - Course
      summary: Add a new course.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/course"
            example:
              department_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
              name: "Bachelor of Science in Computer Science"
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/IncompleteInput"
    put:
      tags:
        - Course
      summary: Update an existing course.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/course"
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '404':
          $ref: "#/components/responses/NotFound"


  ############ DEPARTMENTS ############
  /search/departments/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name used for querying departments.
        example: Education
        schema:
          type: string
      - $ref: "#/components/parameters/page"
      - $ref:  "#/components/parameters/limit"
    get:
      tags:
        - Search
        - Department
      operationId: searchForDepartment
      summary: Search for departments.
      responses:
        '200':
          description: The department entries returned that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/department"
  /departments:
    get:
      tags:
       - Department
      summary: Get list of department. (50 entries per page by default)
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref:  "#/components/parameters/limit"
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/department"
  /department/{departmentID}:
    parameters:
      - name: id
        in: path
        required: true
        description: The entry's unique identifier
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Department
      summary: Get a department from its ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/department"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Department
      summary: Delete an existing department.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /department:
    post:
      tags:
        - Department
      summary: Adds a new department.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/department"
            example:
              name: College of Science
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/IncompleteInput"
    put:
      tags:
        - Department
      summary: Update an existing department.
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/department"
            example:
              id: 87597643-3b07-4b4f-a78e-708a6615c8a6
              name: College of Education
              is_hidden: false
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '404':
          $ref: "#/components/responses/NotFound"


  ############ ACADEMIC_TERMS ############
  /search/academic_terms/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name used for querying academic terms.
        example: S/Y 2018
        schema:
          type: string
      - $ref: "#/components/parameters/page"
      - $ref:  "#/components/parameters/limit"
    get:
      tags:
        - Search
        - Academic Term
      operationId: searchForAcademicTerms
      summary: Search for academic terms.
      responses:
        '200':
          description: The academic terms entries returned that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/academic_term"
  /academic_terms:
    get:
      tags:
       - Academic Term
      summary: Get list of all academic terms. (50 entries per page by default)
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref:  "#/components/parameters/limit"
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/academic_term"
  /academic_term/{academicTermID}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Academic Term
      summary: Get an academic term from its ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/academic_term"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Academic Term
      summary: Delete an existing academic term.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /academic_term:
    post:
      tags:
        - Academic Term
      summary: Adds a new academic term.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/academic_term"
            example:
              name: S/Y 2020-2021 2nd Semester
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/IncompleteInput"
    put:
      tags:
        - Academic Term
      summary: Update an existing academic term.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/academic_term"
            example:
              id: fe3580c2-bdf4-4cd5-bd73-183dc3029b60
              name: S/Y 2021-2022 1st Semester
              is_hidden: false
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '404':
          $ref: "#/components/responses/NotFound"

  ############ STUDENTS ############
  /search/students/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name used for querying students.
        example: Nolla
        schema:
          type: string
      - $ref: "#/components/parameters/page"
      - $ref:  "#/components/parameters/limit"
    get:
      tags:
        - Search
        - Student
      operationId: searchForStudents
      summary: Search for students.
      responses:
        '200':
          description: The entries returned that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/student"
  /search/students?fname=&mname=&lname=:
    parameters:
      - name: fname
        in: query
        required: false
        description: Student's first name
        example: Morton
        schema:
          type: string
      - name: mname
        in: query
        required: false
        description: Student's middle name
        example: Allison
        schema:
          type: string
      - name: lname
        in: query
        required: false
        description: Student's last name
        example: Daubney
        schema:
          type: string
      - $ref: "#/components/parameters/page"
      - $ref:  "#/components/parameters/limit"
    get:
      tags:
        - Search
        - Student
      operationId: searchForStudentsGranular
      summary: Search for students by first, middle, and/or last name.
      description: Empty arguments will not be included in the name filtering, but there must be at least one argument in the query.
      responses:
        '200':
          description: The entries returned that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/student"
  /students:
    get:
      tags:
       - Student
      summary: Get list of all students. (50 entries per page by default)
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref:  "#/components/parameters/limit"
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/student"
  /student/{studentID}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Student
      summary: Get a student from its ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/student"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Student
      summary: Delete an existing student.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /student/{studentID}/rfid/new:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Student
      summary: Generates a new RFID tag identifier for the student.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rfid_tag:
                    type: string
        '400':
          description: RFID Tag is already generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response"
              example:
                code: 400
                message: RFID Tag is already generated. Revoke RFID first if you wish to generate another RFID Tag identifier.
        '404':
          $ref: "#/components/responses/NotFound"
  /student/{studentID}/rfid/revoke:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Student
      summary: Revokes the RFID tag identifier currently assigned to the student.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '404':
          $ref: "#/components/responses/NotFound"
  /student:
    post:
      tags:
        - Student
      summary: Adds a new student.
      description: After a student is successfully created, its corresponding guardian (with empty values) will also be automatically created.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/student"
            example:
              school_id: 2021-CS-1002000
              first_name: McGnobbin
              middle_name: Aoen
              last_name: McGnobbers
              address: Legazpi City
              sex: Male
              birth_date: 04/01/2000
              phone_number: 09299990
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/IncompleteInput"
    put:
      tags:
        - Student
      summary: Update an existing student.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/student"
            example:
              id: 993109d7-9096-4383-add0-c712421bb8f8
              school_id: 2021-CS-1002000
              first_name: McGnobbin
              middle_name: Aoen
              last_name: McGnobbers
              address: Legazpi City
              sex: Male
              birth_date: 04/01/2000
              phone_number: 09299990
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '404':
          $ref: "#/components/responses/NotFound"

  ############ SUBJECTS ############
  /search/subjects/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name used for querying subjects.
        example: Software Engineering
        schema:
          type: string
      - $ref: "#/components/parameters/page"
      - $ref:  "#/components/parameters/limit"
    get:
      tags:
        - Search
        - Subject
      operationId: searchForSubjects
      summary: Search for subjects.
      responses:
        '200':
          description: The entries returned that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/subject"
  /subjects:
    get:
      tags:
       - Subject
      summary: Get list of all subjects. (50 entries per page by default)
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref:  "#/components/parameters/limit"
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/subject"
  /subject/{subjectID}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Subject
      summary: Get a subject from its ID.
      operationId: getSubject
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/subject"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Subject
      summary: Delete an existing subject.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /subject:
    post:
      tags:
        - Subject
      summary: Adds a new subject.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/subject"
            example:
              code: CS 116
              name: Software Engineering
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/IncompleteInput"
    put:
      tags:
        - Subject
      summary: Update an existing subject.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/subject"
            example:
              id: 642e8f50-2e73-4070-a3c0-d173e2e7453a
              code: CS 116
              name: Software Engineering
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '404':
          $ref: "#/components/responses/NotFound"

  ############ GRADES ############
  /grades:
    get:
      tags:
       - Grades
      summary: Get list of all grades of every student. (50 entries per page by default)
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref:  "#/components/parameters/limit"
      operationId: getGrades
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/grade"
  /grades/{enrollmentID}:
    parameters:
      - name: enrollmentID
        in: path
        required: true
        description: The ID of the student's enrollment.
        example: addd3001-210e-4ada-999d-a295b02a384d
        schema:
          type: string
    get:
      tags:
       - Grades
      summary: Get all grades of a student, filtered by the enrollment's academic term by default.
      operationId: getGradesOfStudent
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/grade"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /grade/{enrollmentID}/{subjectID}:
    parameters:
      - name: enrollmentID
        in: path
        required: true
        description: The ID of the student's enrollment.
        example: addd3001-210e-4ada-999d-a295b02a384d
        schema:
          type: string
      - name: subjectID
        in: path
        required: true
        description: The subject ID.
        example: 95ee1ca3-9011-4916-a574-5962bb661fec
        schema:
          type: string
    get:
      tags:
        - Grades
      summary: Get a grade from its IDs.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/grade"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Grades
      summary: Delete an existing grade.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /grade:
    post:
      tags:
        - Grades
      summary: Adds a new grade for a student.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/grade"
            example:
              enrollment_id: 558ae929-b80f-402a-934b-a9a07c201f72
              subject_id: a64da858-0cce-408a-aa01-b89356a15c16
              grade: 3
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/IncompleteInput"
    put:
      tags:
        - Grades
      summary: Update an existing grade.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/grade"
            example:
              enrollment_id: 558ae929-b80f-402a-934b-a9a07c201f72
              subject_id: a64da858-0cce-408a-aa01-b89356a15c16
              grade: 2
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '404':
          $ref: "#/components/responses/NotFound"


  ############ PROFESSORS ############
  /search/professors/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name used for querying professor's name.
        example: Lany
        schema:
          type: string
      - $ref: "#/components/parameters/page"
      - $ref:  "#/components/parameters/limit"
    get:
      tags:
        - Search
        - Professor
      operationId: searchForProfessors
      summary: Search for professors.
      responses:
        '200':
          description: The entries returned that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/professor"
  /search/professors?fname=&mname=&lname=:
    parameters:
      - name: fname
        in: query
        required: false
        description: Professor's first name
        example: Portia
        schema:
          type: string
      - name: mname
        in: query
        required: false
        description: Professor's middle name
        example: Laura
        schema:
          type: string
      - name: lname
        in: query
        required: false
        description: Professor's last name
        example: Mitchell
        schema:
          type: string
      - $ref: "#/components/parameters/page"
      - $ref:  "#/components/parameters/limit"
    get:
      tags:
        - Search
        - Professor
      operationId: searchForProfessorsGranular
      summary: Search for professors by first, middle, and/or last name.
      description: Empty arguments will not be included in the name filtering, but there must be at least one argument in the query.
      responses:
        '200':
          description: The entries returned that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/professor"
  /professors:
    get:
      tags:
       - Professor
      summary: Get list of every professors. (50 entries per page by default)
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref:  "#/components/parameters/limit"
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/professor"
  /professor/{professorID}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Professor
      summary: Get the data of a professor from its ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/professor"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Professor
      summary: Delete an existing professor entry.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /professor:
    post:
      tags:
        - Professor
      summary: Adds a new professor entry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/professor"
            example:
              department_id: 0bfdc55e-88cd-4cbc-a773-d29da94b26b5
              first_name: Lany
              middle_name: L
              last_name: Maceda
              phone_number: 0999999999
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/IncompleteInput"
    put:
      tags:
        - Professor
      summary: Update the data of an existing professor.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/professor"
            example:
              id: b8bfb56f-59ed-40b2-b763-5eee3b1be23c
              department_id: 0bfdc55e-88cd-4cbc-a773-d29da94b26b5
              first_name: Lany
              middle_name: L
              last_name: Maceda
              phone_number: 0999999999
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '404':
          $ref: "#/components/responses/NotFound"

  ############ ENROLLMENTS ############
  /enrollments:
    get:
      tags:
       - Enrollment
      summary: Get list of all enrollments of every student. (50 entries per page by default)
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref:  "#/components/parameters/limit"
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/enrollment"
  /enrollments/{studentID}:
    parameters:
      - name: studentID
        in: path
        required: true
        description: The student's unique identifier.
        example: addd3001-210e-4ada-999d-a295b02a384d
        schema:
          type: string
          format: uuid
    get:
      tags:
       - Enrollment
      summary: Get all enrollments of a student.
      operationId: getEnrollmentsOfStudent
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/enrollment"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /enrollment/{enrollmentID}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Enrollment
      summary: Get the data of an enrollment from its ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/enrollment"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Enrollment
      summary: Void an existing enrollment.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /enrollment:
    post:
      tags:
        - Enrollment
      summary: Enroll a student.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/enrollment"
            example:
              academic_term_id: 22297dec-9bb3-463a-bac8-c9fb2372982b
              student_id: d7f9a296-f5fa-43de-a039-164b5eca806f
              course_id: 416b6cbd-756d-4ceb-9049-db6d062c50d7
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/IncompleteInput"

  ############ COURSE_SCHEDULES ############

  /search/course_schedules/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name used for querying course schedules.
        example: BSCS 3C
        schema:
          type: string
      - $ref: "#/components/parameters/page"
      - $ref:  "#/components/parameters/limit"
    get:
      tags:
        - Search
        - Course Schedule
      operationId: searchForCourseSchedules
      summary: Search for course schedules.
      responses:
        '200':
          description: The entries returned that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/course_schedule"
  /course_schedules:
    get:
      tags:
       - Course Schedule
      summary: Get list of every course schedule. (50 entries per page by default)
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref:  "#/components/parameters/limit"
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/course_schedule"
  /course_schedule/{courseScheduleID}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Course Schedule
      summary: Get data of a course schedule (not including the contents) from its ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/course_schedule"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Course Schedule
      summary: Delete an existing course schedule and its contents.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /course_schedule:
    post:
      tags:
        - Course Schedule
      summary: Adds a new course schedule.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/course_schedule"
            example:
              course_id: 416b6cbd-756d-4ceb-9049-db6d062c50d7
              academic_term_id: 22297dec-9bb3-463a-bac8-c9fb2372982b
              name: BSCS 3 - Block C
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/IncompleteInput"
    put:
      tags:
        - Course Schedule
      summary: Update an existing course schedule's name.
      description: Attempting to change the course schedule's assigned course and/or academic term will only return an error.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/course_schedule"
            example:
              id: 790a4ae2-f559-40b9-999f-9f3e640c837e
              name: BSCS 3 - Block C
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '404':
          $ref: "#/components/responses/NotFound"


  ############ COURSE_SCHEDULES_CONTENTS ############

  /course_schedule_contents/{courseScheduleID}:
    get:
      tags:
       - Course Schedule
      summary: Get the contents of a course schedule.
      parameters:
        - name: courseScheduleID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/course_schedule_content"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /course_schedule_content/{courseScheduleContentID}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Course Schedule
      summary: Get data of a course schedule's content from its ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/course_schedule_content"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Course Schedule
      summary: Delete an existing course schedule content.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /course_schedule_content:
    post:
      tags:
        - Course Schedule
      summary: Add a new course schedule content.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/course_schedule_content"
            example:
              course_schedule_id: 790a4ae2-f559-40b9-999f-9f3e640c837e
              schedule_id: c6bbd7d5-f007-4ded-873c-902a6d9ada7a
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/IncompleteInput"

  ############ COURSE_SCHEDULE + COURSE_SCHEDULE_CONTENT ###########
  /course_schedule_and_contents/{courseScheduleID}:
    get:
      summary: Get the data of a course schedule and its contents.
      tags:
       - Course Schedule
      parameters:
        - name: courseScheduleID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/course_schedule_and_content"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /course_schedule_and_contents:
    post:
      summary: Add entry of a course schedule and its contents.
      tags:
       - Course Schedule
      requestBody:
        required: true
        content:
          application/json:
              schema:
                $ref: "#/components/schemas/course_schedule_and_content"
              example:
                course_id: 18ada21b-e343-4179-8c0a-3ac2fb9d087e
                academic_term_id: 4d84cf53-b379-488a-a259-5ce2151a508c
                name: BSCS 4 - Block C
                content:
                  - ba0870ee-8d8c-4e27-a1ee-cb5e60ff288f
                  - 8bd74895-aac8-4ff7-8fb3-4e770a2b5beb
                  - 56261296-a02b-4954-9999-21f30ec64e1e
                  - 7aab4222-dd1c-4728-90e3-8c141a9d9ea7
                  - 9b95675b-d589-4046-ae8c-d3ce33e231bd
                  - 05ed5a05-9c87-482c-86da-adcb8567f88f
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"

  ############ SCHEDULES ############
  /search/schedules:
    parameters:
      - name: s_name
        in: query
        description: Subject name
        example: Software Eng
        schema:
          type: string
      - name: p_fname
        in: query
        description: Professor's first name
        example: Alma
        schema:
          type: string
      - name: p_mname
        in: query
        description: Professor's middle name
        example: Davie
        schema:
          type: string
      - name: p_lname
        in: query
        description: Professor's last name
        example: Devlin
        schema:
          type: string
      - name: room
        in: query
        description: Schedule room
        example: CS-02-101
        schema:
          type: string
      - name: class
        in: query
        description: Schedule class
        example: BSCS-3-C
        schema:
          type: string
      - $ref: "#/components/parameters/page"
      - $ref:  "#/components/parameters/limit"
    get:
      tags:
        - Search
        - Schedule
      operationId: searchForSchedules
      summary: Search for schedules by its subject name.
      responses:
        '200':
          description: The entries returned that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/schedule"
  /schedules:
    get:
      tags:
       - Schedule
      summary: Get list of every schedule. (50 entries per page by default)
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref:  "#/components/parameters/limit"
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/schedule"
  /schedule/{scheduleID}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Schedule
      summary: Get the data of a schedule from its ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/schedule"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Schedule
      summary: Delete an existing schedule.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /schedule:
    post:
      tags:
        - Schedule
      summary: Adds a new schedule.
      description: >-
        ## Accepted values for 'days'
        
        
        m, t, w, th, f, sa, su, mon, tues, wed, thur, fri,
        monday, tuesday, wednesday, thursday, friday, saturday, sunday


        ## time_duration format


        >_x_ unit [_y_ unit] 


        (Anything inside the square brackets is optional)


        Replace _x_, _y_ with their respective values.
        The only accepted units are hour and minute (plus their plural forms).
        It does not accept durations greater than or equal to 1 day.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/schedule"
            example:
              professor_id: 38fe95f6-e7aa-4b04-9848-ee2d5fb6f94e
              subject_id: 75850f7e-81a9-4441-845b-51d9afa7b7cb
              room: CS-02-101
              class: BSCS-3C
              capacity: 40
              time_start: 09:00
              time_duration: 3 hours 30 minutes
              days:
                - m
                - t
                - th
      responses:
        '201':
          $ref: "#/components/responses/Success201"
        '400':
          $ref: "#/components/responses/IncompleteInput"
    put:
      tags:
        - Schedule
      summary: Update the data of an existing schedule.
      description: >-
        ## Accepted values for 'days'
        
        
        m, t, w, th, f, sa, su, mon, tues, wed, thur, fri,
        monday, tuesday, wednesday, thursday, friday, saturday, sunday


        ## time_duration format


        >_x_ unit [_y_ unit] 


        (Anything inside the square brackets is optional)


        Replace _x_, _y_ with their respective values.
        The only accepted units are hour and minute (plus their plural forms).
        It does not accept durations greater than or equal to 1 day.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/schedule"
            example:
              id: 34ac4863-2c53-44ca-b571-80d2c33f3e15
              professor_id: 38fe95f6-e7aa-4b04-9848-ee2d5fb6f94e
              subject_id: 75850f7e-81a9-4441-845b-51d9afa7b7cb
              room: CS-02-101
              class: BSCS-3C
              capacity: 40
              time_start: 09:00
              time_duration: 3 hours
              days:
                - w
                - f
                - sa
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '404':
          $ref: "#/components/responses/NotFound"


  ############ ATTENDANCES ############
  /attendances:
    get:
      tags:
       - Attendance
      summary: Get list of every attendance. (50 entries per page by default)
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref:  "#/components/parameters/limit"
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/attendance"
  /attendances/{studentID}:
    get:
      summary: Get all the attendances of a student across academic terms.
      tags:
       - Attendance
      parameters:
        - name: studentID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/attendance"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /attendances/{studentID}/{academicTermID}:
    get:
      summary: Get all the attendances of a student within a specific academic term.
      tags:
       - Attendance
      parameters:
        - name: studentID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: academicTermID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/attendance"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /attendance/{attendanceID}:
    parameters:
      - $ref: "#/components/parameters/ID"
    get:
      tags:
        - Attendance
      summary: Get an attendance from its ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/attendance"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Attendance
      summary: Voids an attendance entry.
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  # /attendance:
  #   post:
  #     tags:
  #       - Attendance
  #     summary: Checks in/out an attendance.
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref:  "#/components/schemas/attendance_swipe_card"
  #           example:
  #             device_id: 23c7dace-9da7-435f-9404-c2f23681b38d
  #             rfid_tag: 0eaea5cd-16dc-47e1-ba0f-1bf57903d3e9
  #     responses:
  #       '201':
  #         $ref: "#/components/responses/Success201"
  #       '400':
  #         $ref: "#/components/responses/IncompleteInput"

  ############ GUARDIANS ############
  /search/guardians/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: The name used for querying guardians.
        example: Capuss
        schema:
          type: string
      - $ref: "#/components/parameters/page"
      - $ref:  "#/components/parameters/limit"
    get:
      tags:
        - Search
        - Guardian
      operationId: searchForGuardians
      summary: Search for guardians.
      responses:
        '200':
          description: The entries returned that match the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/guardian"
  /guardians:
    get:
      tags:
       - Guardian
      summary: Get list of every guardian. (50 entries per page by default)
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref:  "#/components/parameters/limit"
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/guardian"
  /guardian/{studentID}:
    parameters:
      - name: student_id
        in: path
        required: true
        description: The student's unique identifier
        schema:
          type: string
          format: uuid
        example: c083eaf3-bfa4-4eb3-a359-bc464fa55406
    get:
      tags:
        - Guardian
      summary: Get a guardian from its associated student ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/guardian"
        '400':
          $ref: "#/components/responses/InvalidID"
        '404':
          $ref: "#/components/responses/NotFound"
  /guardian:
    put:
      tags:
        - Guardian
      summary: Update an existing guardian.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/guardian"
            example:
              student_id: d886d8ef-e718-4514-8421-de408a775bb0
              first_name: Creekt
              middle_name: Mondst
              last_name: Gouste
              phone_number: 0999992999
      responses:
        '200':
          $ref: "#/components/responses/Success"
        '404':
          $ref: "#/components/responses/NotFound"

components:
  schemas:
    response:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

    course:
      type: object
      required:
        - department_id
        - name
      properties:
        id:
          type: string
          format: uuid
        department_id:
          type: string
          format: uuid
        name:
          type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    department:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    academic_term:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    student:
      type: object
      required:
        - first_name
        - middle_name
        - last_name
        - address
        - sex
        - birth_date
        - phone_number
      properties:
        id:
          type: string
          format: uuid
        school_id:
          type: string
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        address:
          type: string
        sex:
          type: string
        birth_date:
          type: string
          format: date
        phone_number:
          type: string
        email_address:
          type: string
          format: email
        is_currently_enrolled:
          type: boolean
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    subject:
      type: object
      required:
        - code
        - name
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
        name:
          type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    grade:
      type: object
      required:
        - enrollment_id
        - subject_id
        - grade
      properties:
        enrollment_id:
          type: string
          format: uuid
        subject_id:
          type: string
          format: uuid
        grade:
          type: number
        is_hidden:
          type: boolean
        updated_at:
          type: string
          format: date-time

    professor:
      type: object
      required:
        - department_id
        - first_name
        - middle_name
        - last_name
      properties:
        id:
          type: string
          format: uuid
        department_id:
          type: string
          format: uuid
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    enrollment:
      type: object
      required:
        - academic_term_id
        - student_id
        - course_id
      properties:
        id:
          type: string
          format: uuid
        academic_term_id:
          type: string
          format: uuid
        student_id:
          type: string
          format: uuid
        course_id:
          type: string
          format: uuid
        is_revoked:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    course_schedule:
      type: object
      required:
        - course_id
        - academic_term_id
        - name
      properties:
        id:
          type: string
          format: uuid
        course_id:
          type: string
          format: uuid
        academic_term_id:
          type: string
          format: uuid
        name:
          type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    course_schedule_content:
      type: object
      required:
        - course_schedule_id
        - schedule_id
      properties:
        id:
          type: string
          format: uuid
        course_schedule_id:
          type: string
          format: uuid
        schedule_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    course_schedule_and_content:
      allOf:
        - $ref: "#/components/schemas/course_schedule"
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: "#/components/schemas/course_schedule_content"

    schedule:
      type: object
      required:
        - professor_id
        - subject_id
        - room
        - class
        - capacity
        - time_start
        - time_duration
        - days
      properties:
        id:
          type: string
          format: uuid
        professor_id:
          type: string
          format: uuid
        subject_id:
          type: string
          format: uuid
        room:
          type: string
        class:
          type: string
        capacity:
          type: integer
          minimum: 1
        time_start:
          type: string
          format: time
        time_duration:
          type: string
          format: interval
        days:
          type: array
          items:
            type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    attendance:
      type: object
      required:
        - device_id
        - academic_term_id
        - student_id
        - rfid_tag
      properties:
        id:
          type: string
          format: uuid
        device_id:
          type: string
          format: uuid
        academic_term_id:
          type: string
          format: uuid
        student_id:
          type: string
          format: uuid
        rfid_tag:
          type: string
          format: uuid
        login_time:
          type: string
          format: date-time
        logout_time:
          type: string
          format: date-time

    # attendance_swipe_card:
    #   type: object
    #   required:
    #     - device_id
    #     - rfid_tag
    #   properties:
    #     device_id:
    #       type: string
    #       format: uuid
    #     rfid_tag:
    #       type: string
    #       format: uuid

    guardian:
      type: object
      required:
        - student_id
      properties:
        student_id:
          type: string
          format: uuid
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

  parameters:
    ID:
      name: id
      in: path
      required: true
      description: The entry's unique identifier
      schema:
        type: string
        format: uuid
      example: c083eaf3-bfa4-4eb3-a359-bc464fa55406

    page:
      name: page
      in: query
      required: false
      description: The number of items to skip = (page - 1) * limit
      schema:
        type: integer
        default: 1

    limit:
      name: limit
      in: query
      required: false
      description: The number of items to return
      schema:
        type: integer
        minimum: 25
        maximum: 500
        default: 50

  responses:
    Success:
      description: Operation completed successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/response"
          example:
            code: 200
            message: Operation completed successfully.

    Success201:
      description: OK; Returns the generated ID
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/response"
              - type: object
                properties:
                  id:
                    type: string
                    format: uuid
          example:
            code: 201
            message: Operation completed successfully.
            id: 18dc7d7c-cab3-46d5-88bc-fea08ff18157

    IncompleteInput:
      description: Missing required fields from input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/response"
          example:
            code: 400
            message: Missing required fields from input.

    InvalidID:
      description: Invalid ID supplied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/response"
          example:
            code: 400
            message: Invalid ID supplied.
      
    NotFound:
      description: Record not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/response"
          example:
            code: 404
            message: Record not found.

  securitySchemes:
    api_key:
      type: apiKey
      name: k
      in: header

    token:
      type: apiKey
      name: t
      in: header

tags:
  - name: Login
    description: Everything related to credentials